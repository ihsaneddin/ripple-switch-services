
  <%= content_tag :table, class: 'table table-hover', id: "addresses" do %>
    <%= content_tag :thead do %>
      <%= content_tag :tr do %>
        <% ["Sequence","Label", "Address", "Status", "Balance", "Pending Received", "Last Update", ""].each do |header| %>
          <%= content_tag :th, header %>  
        <%- end %>
      <%- end %>
    <%- end %>
    <%= content_tag :tbody do %>

      <%= link_to "Complete", complete_ripple_wallet_transaction_path("wallet_id", "tx_hash", { table: { id: "table-container-for-#{controller_name}" }}),
                  class: "btn btn-default complete-a-transaction hidden", id: "proto-complete-transaction", remote: true, method: :put %>

      <%= empty_table wallets, colspan=8, no_record="No record found." %>
      <% wallets.each do |wallet| %>
        <%= content_tag :tr, id: "tr-#{wallet.address}", class: "#{wallet.validated?? nil : "inactive"}", data: { active: link_to(nil,active_ripple_wallet_path(wallet.id), remote: true, method: :put, class: "hidden activate") } do %>
          <%= content_tag :td, wallet.sequence, id: "td-#{wallet.address}-sequence" %>
          <%= content_tag :td, wallet.label %>
          <%= content_tag :td, wallet.address, class: "td-address" %>
          <%= content_tag :td, id: "status-#{wallet.address}-address" do %>
            <%= content_tag :span, "#{wallet.validated?? 'active' : 'inactive'}",class: "active-label label label-#{wallet.validated?? 'info' : 'default'}", title: "You can activate the wallet by deposit" %>
          <%- end %>
          <%= content_tag :td, wallet.balance_xrp.to_s, id: "td-#{wallet.address}-balance" %>
          <%= content_tag :td, wallet.pending_received_transactions_count, id: "td-#{wallet.address}-pending-received" %>
          <%= content_tag :td, time_ago_in_words(wallet.updated_at) %>
          <%= content_tag :td do %>
            
            <% if wallet.deleted? %>
              <%= link_to restore_ripple_wallet_path(wallet, table: {
                  id: "table-container-for-#{controller_name}"
                }), class: "btn btn-default", remote: true, title: "Restore this address", method: :put do %>
                  <%= content_tag :i, nil, class: 'fa fa-undo' %>
              <%- end %> 
            <%- end %>

            <% unless wallet.deleted? %>
              <%= link_to ripple_wallet_path(wallet.id, 
                modal: {
                  id: "ripples-wallet-#{wallet.id}-qr",
                  title: "",
                  template: "ripple/wallets/qrcode"
                }
                ), class: 'btn btn-default', remote: true do %>
                <%= content_tag :i, "", class: 'fa fa-qrcode' %>
              <%- end%>
              
              <%= link_to ripple_wallet_path(wallet.id,
                modal: {
                  id: "ripples-wallet-#{wallet.id}",
                  title: "Wallet Info",
                  template: "ripple/wallets/show"
                }
                ), class: 'btn btn-default remote-modal', remote: true, title: "View QR code" do %> 
                <%= content_tag :i, "", class: 'fa fa-info' %>
              <%- end %>
              
              <%= link_to ripple_wallet_path(wallet.id, 
                table: {
                  id: "table-container-for-#{controller_name}"
                }), remote: true, class: 'btn btn-default', method: :delete, title: "Archive the wallet", data: { confirm: "Are you sure?", title: "Alert" } do %>
                  <%= content_tag :i, "", class: "fa fa-trash" %>
              <%- end %>
            <%- end %>

            <% if true#wallet.validated? %>
              <%= link_to new_ripple_wallet_transaction_path(wallet, 
                    modal: {
                      id: "ripples-wallet-#{wallet.id}-new-transaction",
                      title: "New Transaction",
                      template: "ripple/transactions/new",
                      use_footer: true,
                      use_submit_footer_buttons: true,
                      cancel_button_text: "Cancel",
                      submit_button_text: "Submit",
                      submit_data: { confirm: "Please enter your secret PIN", title: "Confirmation", pin: "true" }
                    },
                    table: {
                      id: "table-container-for-#{controller_name}"
                    }
                  ), class: "btn btn-default remote-modal", remote: true, title: "Create new transaction" do %>

                  <%= content_tag :i, nil, class: "fa fa-minus" %>

              <%- end %>
              
            <%- end %>

          <%- end %>
        <%- end %>
      <%- end %>
    <%- end %>
  <%- end %>

<%= content_tag :div, class: "text-center" do %>
  <%= paginate @wallets, remote: true %>
<%- end %>

<script type="text/javascript">

  var addresses = <%= raw current_account.cached_address_collection %>;

  /*$(document).ready(function(){
    current_balance = 0;
    rippleClient.connect().then(() => {
      $.each( addresses, function( i, address ) {
        rippleClient.getBalances(address).then(balance => {
          current_balance = current_balance + parseFloat(balance[0].value);
          $("#total-balances").text(current_balance)
        })//.then(() => { return rippleClient.disconnect() })
      });
    });
  });*/
  
  $(document).ready(function(){
    var addresses = <%= raw current_account.cached_address_collection %>

    //fillTableAddresses(addresses);

    // unsucsribe first

    wsun = new WebSocket(rippleWS);
    wsun.onopen = function(){
      unsubcsribe= { "id": "unsucsribe-<%= current_account.id %>", "command": "unsucsribe", "accounts_proposed": addresses }
      wsun.send(JSON.stringify(unsubcsribe))
    }

    streams = {
        "id": "subscribe-<%= current_account.id %>",
        "command": "subscribe",
        "accounts_proposed": addresses
      }

    wssu = new WebSocket(rippleWS)
    wssu.onopen = function(){
      wssu.send(JSON.stringify(streams))
    };

    wssu.onmessage = function(e){
      res = JSON.parse(e.data);
      if (res.transaction != undefined){

        current_balance = 0;
        rippleClient.connect().then(() => {
          $.each( addresses, function( i, address ) {
            rippleClient.getBalances(address).then(balance => {
              current_balance = current_balance + parseFloat(balance[0].value);
              $("#total-balances").text(current_balance)
            })//.then(() => { return rippleClient.disconnect() })
          });
        });

        account = res.transaction['Account'];
        destination = res.transaction['Destination']
        if (res.validated && (res.status == "closed"))
        {
          tx_hash = res.transaction['hash'];
          if (addresses.includes(destination)){
            if ((destination != undefined) && (tx_hash != undefined)){
              //reload table and update pending received total
              pending_received = $("#total-pending-received")
              if (pending_received.length){
                count = parseInt(pending_received.text()) - 1;
                pending_received.text(count);
              }
              completeTransaction(destination, tx_hash);
            }
          }

        }else{
          // reload table wallets and update pending received total
          if (addresses.includes(destination)){
            tx_hash = res.transaction['hash'];
            if ((destination != undefined) && (tx_hash != undefined)){
              pending_received = $("#total-pending-received")
              if (pending_received.length){
                count = parseInt(pending_received.text()) + 1;
                pending_received.text(count);
              }
              td_pending_received = $('#td-'+destination+'-pending-received');
              if (td_pending_received.length){
                count = parseInt(td_pending_received.text()) + 1
                td_pending_received.text(count);
              }
              reset_a = $("#table-container-for-wallets").attr("data-reset-path")
              if (reset_a != undefined){
                $("#table-container-for-wallets").append(reset_a)
                $("#table-container-for-wallets").find("a.reset-table")[0].click();
              }
            }
          }        
        }  
      }
      
    }

    wssu.onclose = function(e){
      wssu.send({"id": "unsubscribe-<%= current_account.id %>","command": "unsubscribe","accounts_proposed": addresses })
    }

  });

</script>